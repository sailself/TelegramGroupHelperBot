"""Public handler API for TelegramGroupHelperBot."""
from __future__ import annotations

import langid
import time

from bot.config import (
    RATE_LIMIT_SECONDS,
    USE_VERTEX_IMAGE,
    USER_HISTORY_MESSAGE_COUNT,
    VERTEX_IMAGE_MODEL,
)
from bot.db.database import (
    queue_message_insert,
    select_messages_by_user,
    select_messages_from_id,
)
from bot.llm import (
    ImageGenerationError,
    call_gemini,
    call_openrouter,
    download_media,
    generate_image_with_gemini,
    generate_image_with_vertex,
    generate_video_with_veo,
)

from .access import (
    check_access_control,
    is_access_allowed,
    is_chat_whitelisted,
    is_rate_limited,
    is_user_whitelisted,
    load_whitelist,
    requires_access_control,
    user_rate_limits,
)
from .commands import (
    factcheck_handler,
    handle_media_group,
    help_handler,
    img_handler,
    paintme_handler,
    profileme_handler,
    start_handler,
    support_handler,
    tldr_handler,
    vid_handler,
)
from .content import (
    create_telegraph_page,
    download_telegraph_media,
    download_twitter_media,
    extract_telegraph_urls_and_content,
    extract_twitter_urls_and_content,
    extract_youtube_urls,
)
from .qa import (
    MODEL_CALLBACK_PREFIX,
    MODEL_CAPABILITIES,
    MODEL_CONFIG_VALUES,
    MODEL_DEEPSEEK,
    MODEL_GEMINI,
    MODEL_GROK,
    MODEL_LLAMA,
    MODEL_QWEN,
    cleanup_expired_requests,
    create_model_selection_keyboard,
    deepseek_handler,
    get_model_display_name,
    get_model_function_and_name,
    gpt_handler,
    handle_model_timeout,
    is_model_configured,
    is_openrouter_available,
    llama_handler,
    model_selection_callback,
    pending_q_requests,
    periodic_cleanup_task,
    process_q_request_with_gemini,
    process_q_request_with_specific_model,
    q_handler,
    qwen_handler,
    start_periodic_cleanup,
    stop_periodic_cleanup,
)
from .responses import log_message, send_response

__all__ = [
    'ImageGenerationError',
    'MODEL_CALLBACK_PREFIX',
    'MODEL_CAPABILITIES',
    'MODEL_CONFIG_VALUES',
    'MODEL_DEEPSEEK',
    'MODEL_GEMINI',
    'MODEL_GROK',
    'MODEL_LLAMA',
    'MODEL_QWEN',
    'RATE_LIMIT_SECONDS',
    'USE_VERTEX_IMAGE',
    'USER_HISTORY_MESSAGE_COUNT',
    'VERTEX_IMAGE_MODEL',
    'call_gemini',
    'call_openrouter',
    'check_access_control',
    'cleanup_expired_requests',
    'create_model_selection_keyboard',
    'create_telegraph_page',
    'deepseek_handler',
    'download_media',
    'download_telegraph_media',
    'download_twitter_media',
    'extract_telegraph_urls_and_content',
    'extract_twitter_urls_and_content',
    'extract_youtube_urls',
    'factcheck_handler',
    'generate_image_with_gemini',
    'generate_image_with_vertex',
    'generate_video_with_veo',
    'get_model_display_name',
    'get_model_function_and_name',
    'gpt_handler',
    'handle_media_group',
    'handle_model_timeout',
    'help_handler',
    'img_handler',
    'is_access_allowed',
    'is_chat_whitelisted',
    'is_model_configured',
    'is_openrouter_available',
    'is_rate_limited',
    'is_user_whitelisted',
    'langid',
    'load_whitelist',
    'log_message',
    'model_selection_callback',
    'paintme_handler',
    'pending_q_requests',
    'periodic_cleanup_task',
    'process_q_request_with_gemini',
    'process_q_request_with_specific_model',
    'profileme_handler',
    'q_handler',
    'queue_message_insert',
    'qwen_handler',
    'requires_access_control',
    'select_messages_by_user',
    'select_messages_from_id',
    'send_response',
    'start_handler',
    'start_periodic_cleanup',
    'stop_periodic_cleanup',
    'support_handler',
    'tldr_handler',
    'user_rate_limits',
    'vid_handler',
    'time',
]
